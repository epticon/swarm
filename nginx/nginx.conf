# user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections  1024;
    accept_mutex off; # set to 'on' if nginx worker_processes > 1
}

http {
    resolver 8.8.8.8;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    keepalive_timeout  65;

    #Compression
    # Enable Gzip compressed.
    gzip on;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rdf+xml
    application/rss+xml
    application/schema+json
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-javascript
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/eot
    font/opentype
    image/bmp
    image/svg+xml
    image/vnd.microsoft.icon
    image/x-icon
    text/cache-manifest
    text/css
    text/javascript
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy
    text/xml;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream videostream {
        server videostream:8081;
    }

    upstream swarm {
        server swarm:8080;
    }

    server {
        listen      80;
        listen [::]:80;

        location / {
            root /etc/nginx/html;
        }

        location /swarm {
            proxy_pass http://swarm/ws/;
	    proxy_http_version 1.1;
	    proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # Enable to allow proxy WSS (WebSocket secure: WS over TLS)
	    # ----------------------------------------------------------
	    # proxy_set_header Host $host;
	    # proxy_set_header X-Real-IP $remote_addr;
	    # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	    # proxy_set_header X-Forwarded-Proto $scheme;
	    # proxy_pass_request_headers on;
        }

        location /stream {
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto https;
            proxy_pass http://videostream;
            proxy_intercept_errors on;
            proxy_redirect off;
            add_header Access-Control-Allow-Origin "$http_origin";
        }
    }
}
